name: Build OTA Update

on:
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch:

jobs:
  build-root:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set_versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 cryptography aiohttp selectolax

      - name: Get latest release versions
        id: set_versions
        run: |
          AVBROOT_VERSION=$(curl -s https://api.github.com/repos/chenxiaolong/avbroot/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          CUSTOTA_VERSION=$(curl -s https://api.github.com/repos/chenxiaolong/Custota/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          KERNELSU_VERSION=$(curl -s https://api.github.com/repos/KernelSU-Next/KernelSU-Next/releases/latest | jq -r '.tag_name')

          echo "AVBROOT_VERSION=$AVBROOT_VERSION" >> ota_versions.txt
          echo "CUSTOTA_VERSION=$CUSTOTA_VERSION" >> ota_versions.txt
          echo "KERNELSU_VERSION=$KERNELSU_VERSION" >> ota_versions.txt

          echo "AVBROOT_VERSION=$AVBROOT_VERSION" >> $GITHUB_ENV
          echo "CUSTOTA_VERSION=$CUSTOTA_VERSION" >> $GITHUB_ENV
          echo "KERNELSU_VERSION=$KERNELSU_VERSION" >> $GITHUB_ENV

          echo "versions=AVBROOT_VERSION=$AVBROOT_VERSION\nCUSTOTA_VERSION=$CUSTOTA_VERSION\nKERNELSU_VERSION=$KERNELSU_VERSION" >> $GITHUB_OUTPUT

      - name: Setup avbroot and custota-tool
        run: |
          curl -L -o avbroot.zip "https://github.com/chenxiaolong/avbroot/releases/download/v${AVBROOT_VERSION}/avbroot-${AVBROOT_VERSION}-x86_64-unknown-linux-gnu.zip"
          unzip avbroot.zip -d avbroot && chmod +x avbroot/avbroot && sudo mv avbroot/avbroot /usr/local/bin/

          curl -L -o custota-tool.zip "https://github.com/chenxiaolong/Custota/releases/download/v${CUSTOTA_VERSION}/custota-tool-${CUSTOTA_VERSION}-x86_64-unknown-linux-gnu.zip"
          unzip custota-tool.zip -d custota && chmod +x custota/custota-tool && sudo mv custota/custota-tool /usr/local/bin/

      - name: Get KernelSU boot image
        run: |
          BOOT_IMAGE_URL=$(curl -s https://api.github.com/repos/KernelSU-Next/KernelSU-Next/releases/latest | jq -r '[.assets[] | select(.name | contains("boot.img.gz") and contains("6.1.99"))][0].browser_download_url')
          curl -L -o boot_ksu.img.gz "$BOOT_IMAGE_URL"
          gunzip boot_ksu.img.gz
          mv boot_ksu.img patched_boot.img

      - name: Setup signing keys
        run: |
          echo "${{ secrets.AVB_KEY }}" > avb_key.pem
          echo "${{ secrets.CUSTOTA_KEY }}" > custota_key.pem
          echo "${{ secrets.CUSTOTA_CERT }}" > custota_cert.pem

      - name: Fetch latest OTA update
        run: python .github/scripts/build_ota.py

      - name: Build root OTA
        run: |
          mkdir -p root
          avbroot ota patch --input ./ota.zip --key-avb avb_key.pem --key-ota custota_key.pem --cert-ota custota_cert.pem --prepatched patched_boot.img --output root/cheetah.zip
          custota-tool gen-csig --input root/cheetah.zip --key custota_key.pem --cert custota_cert.pem --output root/cheetah.csig
          custota-tool gen-update-info --file root/cheetah.json --location root/cheetah.csig

      - name: Upload root artifacts
        uses: actions/upload-artifact@v4
        with:
          name: root-ota
          path: |
            root/cheetah.zip
            root/cheetah.csig
            ota_versions.txt

  build-rootless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 cryptography aiohttp selectolax

      - name: Setup signing keys
        run: |
          echo "${{ secrets.AVB_KEY }}" > avb_key.pem
          echo "${{ secrets.CUSTOTA_KEY }}" > custota_key.pem
          echo "${{ secrets.CUSTOTA_CERT }}" > custota_cert.pem

      - name: Fetch latest OTA update
        run: python .github/scripts/build_ota.py

      - name: Build rootless OTA
        run: |
          mkdir -p rootless
          avbroot ota patch --input ./ota.zip --key-avb avb_key.pem --key-ota custota_key.pem --cert-ota custota_cert.pem --output rootless/cheetah.zip --rootless
          custota-tool gen-csig --input rootless/cheetah.zip --key custota_key.pem --cert custota_cert.pem --output rootless/cheetah.csig
          custota-tool gen-update-info --file rootless/cheetah.json --location rootless/cheetah.csig

      - name: Upload rootless artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rootless-ota
          path: |
            rootless/cheetah.zip
            rootless/cheetah.csig

  deploy:
    needs: [build-root, build-rootless]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./artifacts
          branch: gh-pages
          git-config-name: "GitHub Actions"
          git-config-email: "actions@github.com"
          clean: true
          target-folder: .
          files: |
            root/cheetah.json
            rootless/cheetah.json
            root/ota_versions.txt
