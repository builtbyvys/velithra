name: Build OTA Update
on:
  schedule:
    # Check for updates daily
    - cron: "0 0 * * *"
  workflow_dispatch:
    # Manual trigger option
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 cryptography aiohttp selectolax
      - name: Get latest release versions
        id: get_versions
        run: |
          AVBROOT_VERSION=$(curl -s https://api.github.com/repos/chenxiaolong/avbroot/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "AVBROOT_VERSION=$AVBROOT_VERSION" >> $GITHUB_ENV
          CUSTOTA_VERSION=$(curl -s https://api.github.com/repos/chenxiaolong/Custota/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "CUSTOTA_VERSION=$CUSTOTA_VERSION" >> $GITHUB_ENV
          KERNELSU_VERSION=$(curl -s https://api.github.com/repos/KernelSU-Next/KernelSU-Next/releases/latest | jq -r '.tag_name')
          echo "KERNELSU_VERSION=$KERNELSU_VERSION" >> $GITHUB_ENV
      - name: Download and setup avbroot
        run: |
          mkdir -p /tmp/avbroot
          curl -L -o /tmp/avbroot/avbroot.zip "https://github.com/chenxiaolong/avbroot/releases/download/v${AVBROOT_VERSION}/avbroot-${AVBROOT_VERSION}-x86_64-unknown-linux-gnu.zip"
          unzip /tmp/avbroot/avbroot.zip -d /tmp/avbroot/
          chmod +x /tmp/avbroot/avbroot
          sudo mv /tmp/avbroot/avbroot /usr/local/bin/
          rm -rf /tmp/avbroot
      - name: Download and setup custota-tool
        run: |
          mkdir -p /tmp/custota
          curl -L -o /tmp/custota/custota-tool.zip "https://github.com/chenxiaolong/Custota/releases/download/v${CUSTOTA_VERSION}/custota-tool-${CUSTOTA_VERSION}-x86_64-unknown-linux-gnu.zip"
          unzip /tmp/custota/custota-tool.zip -d /tmp/custota/
          chmod +x /tmp/custota/custota-tool
          sudo mv /tmp/custota/custota-tool /usr/local/bin/
          rm -rf /tmp/custota
      - name: Clone or download KernelSU Next
        run: |
          BOOT_IMAGE_URL=$(curl -s https://api.github.com/repos/KernelSU-Next/KernelSU-Next/releases/latest | jq -r '[.assets[] | select(.name | contains("boot.img.gz") and contains("6.1.99"))][0].browser_download_url')
          if [ -n "$BOOT_IMAGE_URL" ]; then
            echo "Using prebuilt KernelSU Next boot image"
            curl -L -o boot_ksu.img.gz "$BOOT_IMAGE_URL"
            gunzip boot_ksu.img.gz
            mv boot_ksu.img patched_boot.img
          else
            echo "Using KernelSU Next sources for patching"
            git clone https://github.com/KernelSU-Next/KernelSU-Next KernelSU
          fi
      - name: Setup signing keys
        run: |
          echo "${{ secrets.AVB_KEY }}" > avb_key.pem
          echo "${{ secrets.CUSTOTA_KEY }}" > custota_key.pem
          echo "${{ secrets.CUSTOTA_CERT }}" > custota_cert.pem
      - name: Fetch latest OTA update
        run: |
          python .github/scripts/build_ota.py
      - name: Build root and rootless OTAs
        run: |
          mkdir -p root rootless
          touch ota_source.json
          touch root/cheetah.json
          touch rootless/cheetah.json

          OTA_SOURCE=$(cat ota_source.json)
          STOCK_VERSION=$(echo $OTA_SOURCE | jq -r '.build')

          # root variant
          FLAVOR="ksu_next-${KERNELSU_VERSION}"
          DEVICE_NAME=$(grep -oP '(?<=ro.product.device=)[^#]*' ota.zip_info.txt | tr -d '\r\n' || echo "cheetah")
          if [ -z "$DEVICE_NAME" ]; then
            DEVICE_NAME="cheetah"
          fi
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DIRTY_SUFFIX=$(git diff --quiet || echo "-dirty")

          avbroot ota patch --input ./ota.zip --key-avb ./avb_key.pem --key-ota ./custota_key.pem --cert-ota ./custota_cert.pem --prepatched ./patched_boot.img --output ./root/cheetah.zip
          custota-tool gen-csig --input ./root/cheetah.zip --key ./custota_key.pem --cert ./custota_cert.pem --output ./root/cheetah.json

          cat > ./root/cheetah.json << EOF
          {
            "version": 2,
            "full": {
              "location_ota": "",
              "location_csig": ""
            }
          }
          EOF

          # rootless variant
          FLAVOR="rootless"

          avbroot ota patch --input ./ota.zip --key-avb ./avb_key.pem --key-ota ./custota_key.pem --cert-ota ./custota_cert.pem --output ./rootless/cheetah.zip
          custota-tool gen-csig --input ./rootless/cheetah.zip --key ./custota_key.pem --cert ./custota_cert.pem --output ./root/cheetah.json

          cat > ./rootless/cheetah.json << EOF
          {
            "version": 2,
            "full": {
              "location_ota": "",
              "location_csig": ""
            }
          }
          EOF

          # summary
          cat > ./versions.json << EOF
          {
            "device": "${DEVICE_NAME}",
            "stock_version": "${STOCK_VERSION}",
            "kernelsu_version": "${KERNELSU_VERSION}",
            "avbroot_version": "${AVBROOT_VERSION}",
            "custota_version": "${CUSTOTA_VERSION}",
            "build_date": "$(date +'%Y-%m-%d %H:%M:%S')",
            "commit": "${COMMIT_HASH}${DIRTY_SUFFIX}"
          }
          EOF

          echo "Build Summary"
          echo "Device: ${DEVICE_NAME}"
          echo "Stock version: ${STOCK_VERSION}"
          echo "KernelSU version: ${KERNELSU_VERSION}"
          echo "Root OTA: ${ROOT_OTA_FILENAME}"
          echo "Rootless OTA: ${ROOTLESS_OTA_FILENAME}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ota-packages
          path: |
            root/
            rootless/
            versions.json
          retention-days: 7
      - name: Deploy OTA to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: .
          branch: gh-pages
          git-config-name: "GitHub Actions"
          git-config-email: "actions@github.com"
